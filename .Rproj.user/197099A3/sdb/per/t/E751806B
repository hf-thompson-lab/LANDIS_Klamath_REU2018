{
    "collab_server" : "",
    "contents" : "# Evan Waldmann \n\n## Section - hard coded value definitions & rules that are used to generate cuts ----\n# raster temp values: \n# 0  -- NA values \n# 1  -- forest growth = no cuts \n# 20 -- development proximity cuts\n# 21 -- steep development proximity cut\n# 30 -- fire salvage cut\n# 31 -- steep slope fire salvage cut\n# 155 -- clear cut for fuel break on private land\n# 156 -- clear cut for fuel break on FS land \n\n# rules:  \n# 30 percent slope is the max for mechanical thinning - uplands\n# right now greater than 60 degree slope will not be cut. \n\n# mechanical treatments would be used to prevent fire from entering land near developed area. \n# cuts are assumed to last 15 years and after 15 years the area is eligible to cut again\n# cut limit per year is 4% of total active cells - this is then divided between FS and private cut limits \n\n# land around developed area will be cut if there is enough fire within 415.53ha circle of the development (not sure on the size)\n#                               (9X9 cell search for areas around development that >=50.87% [29/57] of the cells have fire on them) \n\n# post fire salvage logging in areas that were not completely destroyed (I am unsure of the quantity of this cutting - might need to turn it down)\n\n# fuel breaks implemented to clear cut in order to divide large groups of connect fuel types. \n# FS owned land uses planned fuel breaks that follow the low elevations contour. \n# these consist of 3 lines that cut every 10 years  \n\n# Section - start setup ----\nstart_time <- Sys.time()\nprint(start_time)\n\nlinesLog <- c(paste(\"run at\", start_time, \"log:\"))\n\nlibrary(raster)\nlibrary(rgdal)\nlibrary(rgeos)\n\n#set working directory\nworkingDirectoryPath <- getwd()\nsetwd(workingDirectoryPath)\n\nprint(getwd())\nlinesLog <- c(linesLog, getwd())\n\n#get the current timestep\ntimestep <- readLines( \"lockfile\",n = 1)\ntimestep <- as.numeric(timestep)\n\n#set up paths \nlandUseParameterFilePath <- file.path(\"land-use-FireManagement.txt\")\nluOutputPath <- paste0(file.path(\"..\",\"Landis_Outputs\",\"land-use-maps\",\"land-use-\"), timestep, \".img\")\nlandUseMasterPath <- file.path(\"clippedRaster\",\"land-use\",\"landOwnerSA3.tif\")\nslopePath<- file.path(\"clippedRaster\",\"slopeSA3.tif\")\ndevelopPath <- file.path(\"clippedRaster\",\"land-use/developRasSA3.tif\") #https://gis1.usgs.gov/csas/gap/viewer/land_cover/Map.aspx \nseverityPath <- file.path(\"..\",\"Landis_Outputs\",\"fire\", paste0(\"severity-\",timestep,\".img\"))\nfuelPath <- file.path(\"..\",\"Landis_Outputs\",\"fire\", \"fuels\", paste0(\"FuelType-\", timestep, \".img\"))\ncutHistoryPath <- file.path(\"..\",\"Landis_Outputs\",\"land-use-maps\",\"cutHistory.img\")\nseverityHistoryPath <- file.path(\"..\",\"Landis_Outputs\",\"logs\",\"severityHistory.img\")\ndataPerTimeStepPath <- file.path(\"..\",\"Landis_Outputs\",\"logs\",\"trendsPerTimeStep.csv\")\nlogTxtPath <- file.path(\"..\",\"Landis_Outputs\",\"logs\",\"logfile.txt\")\ntabuListPath <- file.path(\"..\",\"Landis_Outputs\",\"logs\",\"tabuList.csv\")\nfsCutPath <- file.path(\"clippedRaster\", \"FSfirebreakSA3.tif\")\n\n#read in rasters \nluMaster <- raster(landUseMasterPath)\nslopeRaster <- raster(slopePath)\ndevelopRaster <- raster(developPath)\nseverityRaster <- raster(severityPath)\nfuelRaster <- raster(fuelPath)\n\n\nnrow <- 101\nncol <- 205 \n\n#create or read in history rasters  \nif (timestep==1 | !dir.exists(file.path(\"..\",\"Landis_Outputs\",\"logs\")) | !dir.exists(file.path(\"..\",\"Landis_Outputs\",\"land-use-maps\")))# generate new cutHistory \n{\n  if (!dir.exists(file.path(\"..\",\"Landis_Outputs\",\"logs\"))) {dir.create(file.path(file.path(\"..\",\"Landis_Outputs\",\"logs\")))}  # create the logs directory if it isnt there\n  if (!dir.exists(file.path(\"..\",\"Landis_Outputs\",\"land-use-maps\"))) {dir.create(file.path(file.path(\"..\",\"Landis_Outputs\",\"land-use-maps\")))}  # create the land-use-maps directory if it isnt there\n  \n  cutHistory <- luMaster\n  values(cutHistory)[!(is.na(values(luMaster) ))] <- -1\n  \n  severityHistory <- luMaster\n  values(severityHistory)[!(is.na(values(luMaster) ))] <- -1\n  \n  #overwrite log file and trendsperTimeStep file \n  write(\" \", logTxtPath, append=F)\n  write.table( data.frame(TimeStep= numeric() , CellsCut = numeric(),FSCuts= numeric(), PrivateCuts= numeric(), CutsNearDevelopment = numeric()  , CutsForPostFireSalvage = numeric(), rejectedProximityCuts=numeric(), rejectedSalvageCuts= numeric(), CellsWithFire=numeric()) ,  file=dataPerTimeStepPath ,  append = F,  sep=',',  row.names=F,  col.names=T )\n  \n  #erase previous tabu logs\n  write.csv(data.frame(colEq=numeric(0), rowEq=numeric(0), step=numeric(0), id=numeric(0)),tabuListPath, row.names = F, quote = F)\n  \n}else #read in cutHistory  \n{\n  cutHistory <- raster(cutHistoryPath)\n  severityHistory <- raster(severityHistoryPath)\n}\n\nprint(\"Rasters Read!\")\n\nONLYFIREBREAK <-F # if TRUE it skips over the proximity to development and salvage cutting. \nPERMANENTFSFIREBREAKS <- T # if TRUE this forces FS land to use the same  fire break cuts\n# end of setup. \n\n\n# Section - cut limits and determining inactive cells and prohibited cells from cut history ---- \n\n# we can grab the unforested areas from the fuels and delete them later\n#unforested areas are 1 , out of bounds areas are 0 \noutOfSquareCells <- which(is.na(values(luMaster)))  # out of square cells \noutOfBoundsCells <- which(values(fuelRaster) ==0) # inactive sites and out of square cells \ninSquareInactiveCells <- (setdiff(outOfBoundsCells, outOfSquareCells )) # insquare cells that are inactive \nunforestedCells <- which(values(fuelRaster) == 1) # un forested cells \nwildernessCells <- which(values(luMaster)== 1111) # | values == 111 # both values are wilderness area cells (111 is only 4 cells though) \n\n\n# set up limits for cutting on private and forest service\n#total cells active cells -- 300*312 - length(inSquareInactiveCells) - length(outOfSquareCells) = 54271  # this might be wrong it might be  57391\n# 54271*.05 = 2714 \nmaxPercentCut <- .075 #max percent of cells that will be cut each year \nmaxCutCells<- nrow*ncol - length(inSquareInactiveCells) - length(outOfSquareCells)  * maxPercentCut \nfsLimit<- floor(maxCutCells * 0.6766776) #(30414+12080)/(14464+5836+4 +30414+12080) #these numbers come from freq(luMaster)\nprivateLimit <- floor(maxCutCells* 0.3233224) # (14464+5836+4)/(14464+5836+4 +30414+12080)\n\n\n#delete cuts that are older than 15 years \nrecentCuts <-  which( !(values(cutHistory) < timestep-14) & values(cutHistory)> 0) # cuts that happened recently and dont need to be cut again \n\ndontCuts <-unique( c( unforestedCells, wildernessCells, recentCuts)) #set to 1 [forest] later (in land use map) \nDestroyCellsThatShouldBeNA <- outOfBoundsCells #set to 0 [NA] later (in land use map)\n\nlinesLog <- c(linesLog, paste(\"OoB #:\", length(outOfBoundsCells)), paste(\"WA #:\", length(wildernessCells)),paste(\"UF #:\", length(unforestedCells)))\n\n\nif (!ONLYFIREBREAK){\n  # Section - identifying cells with fire that is within a ciclre of 9 cells (415.53 ha) from developed areas ----\n  \n  # metadata for developRaster if you want it #developed areas # 580 -584 \n  #attrTablePath <- \"clippedRaster/land-use/GAP_LANDFIRE_National_Terrestrial_Ecosystems_2011_Attributes.csv\"\n  #attrTable <- read.table(attrTablePath, header = T, sep=\",\");clippedTable <- attrTable[which(attrTable$Value %in% vals),];clippedTable[c(1,19)]\n  \n  # get severity of fire with in proximity to development \n  #ideally we can order the severities here and then figure out where fire is closest to which developed area (or fire management area)\n  \n  cells <- which(values(developRaster) > 580) #581 is developed open space 582-584 are low to high intensity of development\n  neighborhoodMatrix <- matrix(1, ncol=9, nrow = 9) # not sure on the sizing here 415.53ha circle \n  neighborhoodMatrix[5,5] <- 0\n  \n  # this gets rid of the boxy fire response cuts  \n  nm <- neighborhoodMatrix\n  corners <- c(1:3, 6:9)\n  for (r in corners)\n  {\n    for (c in corners)\n    {\n      if (( r+c ==2 | (r+c==3) | (r+c ==4) |abs(r-c) ==8 | (abs(r-c)==7) | (abs(r-c) ==6) |r+c ==16 | (r+c==18) | (r+c ==17)) )\n        nm[r,c] <- NA\n    }\n  }\n  neighborhoodMatrix <- nm\n  \n  #sumTable <- data.frame(cell=numeric(length(cells)), mean=numeric(length(cells)), median=numeric(length(cells)), count=numeric(length(cells)) )\n  sumTable <- data.frame(cell=numeric(length(cells)), count=numeric(length(cells)) )\n  sV <- values(severityRaster)\n  for (i in 1:length(cells)) # this could be sped up \n  {\n    adj <- adjacent(developRaster, cells[i], directions=neighborhoodMatrix, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T)\n    #sumTable[i,]<-c(cells[i], mean(sV[adj], na.rm=T), median(sV[adj], na.rm = T), sum(sV[adj] > 2))\n    sumTable[i,]<-c(cells[i], sum(sV[adj] > 2))\n  }\n  #sumTable <- sumTable[order(-sumTable$mean),]\n  sumTable <- sumTable[order(-sumTable$count),]\n  \n  #where 5 is the mean and median and 29/57 cells need fire as thresholds for cutting.  \n  #proximityToDevelopmentCells <- adjacent(developRaster, sumTable$cell[sumTable$mean>4 | sumTable$median>4 | sumTable$count >= 29], directions=neighborhoodMatrix, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T)\n  proximityToDevelopmentCells <- adjacent(developRaster, sumTable$cell[ sumTable$count >= 29], directions=neighborhoodMatrix, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T)\n  \n  print(paste(length(proximityToDevelopmentCells), \"cells identified because of fire that is near developed cells\"))\n  \n  linesLog <- c(linesLog, paste(length(proximityToDevelopmentCells), \"cells identified because of fire that is near developed cells\"))\n  \n  \n  #Section - cutting in areas surrounding development ----\n  dR <- developRaster\n  values(dR)[which(values(developRaster) < 580)] <- 1  #we only care about the space labeled as developed which is 580-584\n  \n  neighM <- matrix(1, ncol=3, nrow = 3) # clear within a quarter of a mile of important structures -- from SISKIYOU COUNTY WILDFIRE PROTECTION PLAN APRIL 23, 2008\n  neighM[2,2] <- 0\n  cells <- proximityToDevelopmentCells\n  \n  #take into account slope. \n  rm(adj)\n  adj<- adjacent(dR, cells, directions=neighM, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T)\n  df <- data.frame(cellNum=adj, slopes=values(slopeRaster)[adj]) \n  df <- rbind(df,data.frame(cellNum=cells, slopes=values(slopeRaster)[cells]))\n  \n  values(dR)[which(values(dR) < 585)] <- 1 # set the development areas to be forest growth\n  values(dR)[subset(df, df$slopes <31)$cellNum] <- 20 # regular cuts \n  values(dR)[subset(df, df$slopes >30)$cellNum] <- 21 # steep cuts \n  values(dR)[subset(df, df$slopes >60)$cellNum] <- 1  # if slope is too steep dont cut\n  \n  \n  # Section - Salavage logging - clear cutting (and planting?) burnt forests ----\n  # might need addition qualifier of \"if fire was super bad\" (probably best to be implemented as if fire has reach XX% of active cells)\n  rm(cells)\n  cells <- which(values(severityRaster) > 2 & values(severityRaster)<6)\n  \n  rm(df)\n  df <- data.frame(cellNum=adjacent(dR, cells, directions=8, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T), slopes=values(slopeRaster)[adjacent(dR, cells, directions=8, pairs=F, target=NULL, sorted=T,  include=FALSE, id=T)]) \n  df <- rbind(df,data.frame(cellNum=cells, slopes=values(slopeRaster)[cells]))\n  values(dR)[subset(df, df$slopes <31)$cellNum] <- 30 #regular cuts\n  values(dR)[subset(df, df$slopes >30)$cellNum] <- 31 #step cuts \n  values(dR)[subset(df, df$slopes >60)$cellNum] <- 1    #too steep to cut \n  values(dR)[which(values(dR) == 581)] <-1 # set the open space to grow \n  \n  developedCells <- which(values(dR) >581 &values(dR) <1000 )# developed cells that werent hit by fire... \n  values(dR)[developedCells] <- 1 #set for forest to growth \n  \n  \n  # Section - get fuel break cuts ---- \n  \n  #if (timestep%%3 ==0){\n  source(\"../FindFuelBreaks.R\")\n  \n  #slim down the size of so that we are only planning fuel breaks on the private side of the land\n  tempFuelRas <- fuelRaster\n  vals <- values(tempFuelRas)\n  matVals <- matrix(vals, nrow=ncol, ncol=nrow) # have to flip nrow and ncol for raster to matrix conversion \n  matVals[1:95,]<- 0 #95 is about where there forest service land stops and and the private land begins in the land use map. \n  values(tempFuelRas)<- as.vector(matVals)\n  \n  fuelBreaks <- findFuelBreaks(tempFuelRas, fuelValsToConsider= (c(1:6,10,11)+1), minCellsConnect=20, numFuelsToSplit=15, numOfLargestFuelsToPickFrom=30, rownum=ncol, colnum =  nrow, tabuListPath=tabuListPath)# have to flip nrow and ncol for the raster to matrix conversion\n  values(dR)[which(!is.na(values(fuelBreaks)))] <- 155\n  #}\n  \n  \n}else{#ONLYFIREBREAKS \n  #this else block has not be adjusted for the 91 year runs.... \n  if (timestep%%5 ==0){\n    source(\"FindFuelBreaks.R\")\n    fuelBreaks <- findFuelBreaks(fuelRaster, fuelValsToConsider= (c(1:6,10,11)+1), minCellsConnect=35, numFuelsToSplit=8, numOfLargestFuelsToPickFrom=15)\n    values(fuelBreaks)[which(!is.na(values(fuelBreaks)) )] <- 155 \n    values(fuelBreaks)[which(is.na(values(fuelBreaks)) )]<-0\n    dR <- fuelBreaks\n  }\n}\n\n\n# Section - change navalue, exclude prohibited cuts, \n\n#curious about how many cuts were proposed in inactive and prohibited sites \nprepostFireClearing <- sum(values(dR)==30, na.rm = T)+sum(values(dR)==31, na.rm = T)\npreproximityClearing <- sum(values(dR)==20, na.rm = T)+sum(values(dR)==21, na.rm = T)\n\nvalues(dR)[DestroyCellsThatShouldBeNA] <- 0  # get rid of prohibited cuts  \nvalues(dR)[dontCuts] <-1 # exclude cuts in cells that are unforested, wilderness areas, or that have been cut recently \n\n# get ownership data for permenant fire breaks and applying cut limit to remaining cuts \ncellsCut <- which(values(dR)>1)\nownerDF <- data.frame(cell= cellsCut,owner= as.integer(values(luMaster)[cellsCut]/1000)) #forest service owned land is over 1000. \nFS <- subset(ownerDF, owner==1)$cell\npri <- subset(ownerDF, owner==0)$cell\n\n#change FS fuel break cutting code \nvalues(dR)[intersect(which(values(dR)==155), FS)] <- 156 \n\n#Section - clear fire breaks on federal land and put in the permanant ones (if permanent cuts are one). ---- \nif (PERMANENTFSFIREBREAKS)\n{\n  timeskip <- suppressWarnings( na.omit(as.numeric(unlist(strsplit(grep(\"Timestep\",readLines(landUseParameterFilePath), value=T),\" \"))))[1])\n  \n  \n  values(dR)[which(values(dR) == 156)] <- 1 # Clear fire breaks made on federal land (set to forest growth)\n  if (timeskip==1){\n    fsCutVals <- \n      if (timestep%%10 == 1) {\n        fsCutRaster <- raster(fsCutPath)\n        permanentCutCells <- which(values(fsCutRaster)==101 | values(fsCutRaster)==99) \n        values(dR)[permanentCutCells] <- 156 # cut the permanent cuts\n      } else if (timestep %% 10 == 4) {\n        fsCutRaster <- raster(fsCutPath)\n        permanentCutCells <- which(values(fsCutRaster) ==102 | values(fsCutRaster==50)) \n        values(dR)[permanentCutCells] <- 156 # cut the permanent cuts\n      }else if (timestep %% 10 == 8) {\n        fsCutRaster <- raster(fsCutPath)\n        permanentCutCells <- which(values(fsCutRaster) ==103| values(fsCutRaster==98)) \n        values(dR)[permanentCutCells] <- 156 # cut the permanent cuts\n      }\n  }\n  else {\n    fsCutRaster <- raster(fsCutPath)\n    permanentCutCells <- which(values(fsCutRaster)==101 | values(fsCutRaster)==99|values(fsCutRaster) ==102 | values(fsCutRaster==50) | values(fsCutRaster) ==103| values(fsCutRaster==98)) \n    values(dR)[permanentCutCells] <- 156 # cut the permanent cuts\n  }\n}\n\n\n# Section - Apply cut limit. ----\n#if over either of the limits then random sample to delete proposed cuts. \nif(length(pri) > privateLimit)\n{\n  numToRemove<- length(pri) - privateLimit\n  \n  values(dR)[pri[sample(1:length(pri), numToRemove, replace=F)]] <- 1\n  \n  print(paste(\"Reached private cut limit. Removing\",numToRemove,\"proposed cuts.\"))\n  linesLog <- c(linesLog, paste(\"Reached private cut limit. Removing\",numToRemove,\"proposed cuts.\"))\n}\n\nif(length(FS) > fsLimit) \n{\n  numToRemove<- length(FS) - fsLimit\n  values(dR)[FS[sample(1:length(FS), numToRemove)]] <- 1\n  \n  print(paste(\"Reached Forest Service cut limit. Removing\",numToRemove,\"proposed cuts.\"))\n  linesLog <- c(linesLog, paste(\"Reached Forest Service cut limit. Removing\",numToRemove,\"proposed cuts.\"))\n}\n\n\n\n# Section - output extra logs, output plots, write land-use raster ---- \n#stores cut history \ncellsCut <- which(values(dR)>1)\nvalues(cutHistory)[cellsCut] <- timestep\nvalues(severityHistory)[which(values(severityRaster)>2)] <- timestep  #might want to only record higher severity fires \n\nCellsWithFire =sum(values(severityHistory) ==timestep, na.rm = T)\n\ncutsMade<-sum(values(dR)>1, na.rm = T)\n\n# logging cuts made to file \nprint(paste0(\"cells cut: \", cutsMade))\nlinesLog <- c(linesLog, paste0(\"cells cut: \", cutsMade))\nprint(paste0(\"ha cut: \", cutsMade*7.29))\nlinesLog <- c(linesLog, paste0(\"ha cut: \", cutsMade*7.29))\ntotalCutsPossible <- nrow*ncol - length(outOfBoundsCells) - length(unforestedCells) - length(wildernessCells)\nprint(paste0(\"percent cut (total cells -OoB-UF-WA): \", round(cutsMade/(totalCutsPossible)*100,2), \"%\" ))\nlinesLog <- c(linesLog, paste0(\"percent cut (total cells -OoB-UF-WA): \", round(cutsMade/(totalCutsPossible)*100,2), \"%\" ))\n\n\npostFireClearing <- sum(values(dR)==30, na.rm = T)+sum(values(dR)==31, na.rm = T)\nproximityClearing <- sum(values(dR)==20, na.rm = T)+sum(values(dR)==21, na.rm = T)\n# TODO - fix logging data -- this isnt very good right now. ====\ntimestepData <- data.frame(TimeStep= timestep, CellsCut = cutsMade,FSCuts=length(FS), PrivateCuts=length(pri) , CutsNearDevelopment = proximityClearing , CutsForPostFireSalvage = postFireClearing, rejectedProximityCuts= preproximityClearing- proximityClearing, rejectedSalvageCuts= prepostFireClearing- postFireClearing, CellsWithFire=CellsWithFire )\n\nprint(freq(dR))\n\n\nwriteRaster(dR, luOutputPath, overwrite = T,format=\"HFA\", datatype=\"INT2S\", NAvalue=0)\nwriteRaster(cutHistory, cutHistoryPath, overwrite =T, format=\"HFA\", datatype=\"INT2S\", NAvalue=0)\nwriteRaster(severityHistory, severityHistoryPath, overwrite=T, format=\"HFA\", datatype=\"INT2S\", NAvalue=0)\nwrite.table( timestepData,  file=dataPerTimeStepPath ,  append = T,  sep=',',  row.names=F,  col.names=F )\n\n\n# end timer ----\nend_time <- Sys.time()\ntotal_time <- end_time - start_time\nlinesLog <- c(linesLog, paste(\"total time taken\",total_time))\nlinesLog<- c(linesLog,\" \",paste(\"END OF TIMESTEP\",timestep),\"********************************************\")\nwrite(linesLog, logTxtPath, append=T)\nprint(total_time)",
    "created" : 1532108177904.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2103221766",
    "id" : "E751806B",
    "lastKnownWriteTime" : 1532108106,
    "last_content_update" : 1532108106,
    "path" : "C:/Users/hfintern/Desktop/LANDIS_Klamath_REU2018/land-use-FireResponseToRun.R",
    "project_path" : "land-use-FireResponseToRun.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}